package seminars.hw004;
/*Задача 4. Сдвиг очереди
    Реализуйте метод rotateDeque в классе DequeTasks, который принимает
    Deque<Integer> и число n. Метод должен повернуть очередь вправо на
    n позиций. Если n отрицательное, повернуть влево.*/

/*Задача 5*. Удаление слова из очереди
    Реализуйте метод removeAllOccurrences в классе DequeTasks, который
    принимает Deque<String> и строку value. Метод должен удалить все
    вхождения строки value из очереди.*/

//Подсказка № 1
//Для вращения очереди вправо на n позиций используйте метод addLast для
//добавления элемента в конец очереди и removeFirst для удаления элемента из
//начала очереди. Если n отрицательное, это означает, что нужно вращать влево.
//Подсказка № 2
//Поскольку очередь может быть вращена на большее количество позиций, чем её
//размер, сначала упростите значение n, используя остаток от деления на размер
//очереди (n % size). Это поможет избежать лишних циклов вращения.
//Если n отрицательное, преобразуйте его в эквивалентное положительное значение
//для вращения вправо. Например, если n равно -3 и размер очереди size равен 5, то
//вам нужно добавить size к n, чтобы получить эквивалентное положительное значение
//вращения.
//Подсказка № 4
//Используйте цикл, чтобы повторить операцию добавления и удаления элемента из
//очереди n раз, где n — количество позиций, на которые нужно вращать очередь.
//Убедитесь, что очередь не пуста, прежде чем выполнять операции.

import java.util.Deque;

public class DequeTasks {
    public static void rotateDeque(Deque<Integer> deque, int n) {
        if (deque.isEmpty()) return;
        int size = deque.size();
        n = n % size;
        if (n < 0) {
            n += size;
        }
        for (int i = 0; i < n; i++) {
            deque.addLast(deque.removeFirst());
        }
    }

    public static void removeAllOccurrences(Deque<String> deque, String value) {
        deque.removeIf(s -> s.equals(value));
        System.out.println(deque);
    }
}
